<!DOCTYPE html>
<html lang="en" class="">
  <head> 
    <title>ðŸ”ŽðŸš¢ Create a Stevedore Search Engine</title>
    <link href="/lib/css/bootstrap.min.css" rel="stylesheet">
    <script src="/lib/js/jquery-2.1.3.min.js"></script>
    <script src="/lib/js/underscore-min.js"></script>
    <script src="/lib/js/bootstrap.min.js"></script>
  </head>
  <body>
    <script type="text/javascript">
      $(document).on('keydown', 'form #files input', function(e){
        // if it matches s3://, bold #already-on-s3
        var text = $(e.currentTarget).val();
        if (text.indexOf("s3://") > -1 || text.indexOf("S3://") > -1){
          $('#already-on-s3').css("font-weight: bold;");
        }
      });
      $(document).on('blur', 'form #es-host input', function(e){
        // check if ElasticSearch is reachable; get alias names and stash them on window
        var es_host = $(e.currentTarget).val();

        aliases_host = (es_host.indexOf("http") === 0 ? '' : 'http://') + es_host + (es_host[es_host.length -1 ] == "/" ? '' : '/') + "_aliases"
        $.getJSON(aliases_host, function(aliases){
          console.log('got aliases', _.keys(aliases));
          // TODO: set aliases on window.
          window.es_aliases = _.keys(aliases);

        }, function(error){
          console.log("error couldn't reach " + es_host)
        })
      });
      $(document).on('blur', 'form #index-title input', function(e){
         // 1. check if name already exists
         // 2. fill in #index-name input
        var text = $(e.currentTarget).val();
        $('#index-title-copy').text(text);
        var proposed_index_name = text.replace(/[^\w- ]/g, '').replace(/ /g, '-').toLowerCase();
        if(window.es_aliases && window.es_aliases.indexOf(proposed_index_name) > -1){
          proposed_index_name = proposed_index_name + parseInt( new Date().getTime() / 1000).toString();
        }
        var was_disabled = $('#index-name input').is('[disabled]');
        $('#index-name input').removeAttr('disabled');
        $('#index-name input').val(proposed_index_name);
        if(was_disabled){
          $('#index-name input').attr('disabled', '');
        }
      });

      $(document).on('change', '#local-or-foreign input', function(){
        if( this.value == 'local' ){
          $('.container').removeClass("foreign");
          $('.container').addClass("local");
        }else{
          $('.container').addClass("foreign");
          $('.container').removeClass("local");
        }
      })


      var logs = new EventSource('/upload/stream');

      $(document).on('click', '#submit', function(e){
        var was_disabled = $('#index-name input').is('[disabled]');
        $('#index-name input').removeAttr('disabled');
        $.post('/upload/do', $('form').serialize(), function(json_resp){
          resp = JSON.parse(json_resp);
          console.log(resp);
          if(!resp["success"]){
            if(was_disabled){
              $('#index-name input').attr('disabled', '');
            }
            if(resp["invalid"]){
              console.log("invalid fields")
              $('.input-field .error').remove();
              _(resp["invalid"]).each(function(invalid_field){
                $('#' + invalid_field[0]).css("background-color", "#faa");
                window.setTimeout(function(){$('#' + invalid_field[0]).css("background-color", "white")}, 2000);
                $('#' + invalid_field[0]).append("<p class='error' style='color: red;'>Invalid value '" + invalid_field[1] + "' for "+invalid_field[0]+"'</p>")
              })
            }
            if(resp["error"]){
              alert("There was an error processing your data.")
              logs.close()
              $('#logs').text(resp["error"])
            }
          }else{
            window.location.href=resp["frontend_url"];
          }
        })
        return false; // so we don't actually submit
      })

      $(document).on('change', '#filetype select', function(e){
        if ($(e.currentTarget).val() == "OTHER"){
          $('#filetype input').show();
        }else{
          $('#filetype input').hide();
        }
      });

      // watch the logs streaming from Sinatra.
      logs.onmessage = function(e) { $('#logs').html(e.data) };

    </script>

    <style>
      .everything-container {
        max-width: 1024px;
        margin-left: auto;
        margin-right: auto;
      }
       /* Global */

      .navbar {
        background-color:#f6f6f6;
        border-bottom:1px solid #e5e5e5;
      }

      .navbar .container {
          margin-top:7px;
          margin-bottom:7px;
      }

      .navbar-nyt-default .navbar-brand, .navbar-nyt-default .navbar-brand:hover {
        font-family:nyt-stymie;
        font-weight:700;
        font-size:24px;
      }

      .navbar-nyt-default .navbar-nav .navbar-summary {
          padding:0 15px 0 15px;
          margin:16px 0 0;
          font-family:nyt-stymie;
          font-size:16px;
          font-weight:400;
      }

      .navbar-nyt-default .navbar-bits {
          font-size:11px;
          font-weight:500;
          text-transform:uppercase;
          letter-spacing:1px;
      }

      /* from adcom-nyt.css */
      .container {
        max-width: 970px;
      }

      .input-field {
        padding: 10px;
      }

      #new-index input[type="text"] {
        min-width: 50%;
        max-width: 100%;
      }
      #new-index textarea {
        min-width: 50%;
        max-width: 100%;
      }

      #logs {
        font-family: monospace;
        color: black;
        background-color: #eee;
        min-height: 200px;
        padding: 10px;
        margin: 20px 0 50px;
      }

      #submit {
        margin-top: 10px;
      }

      input[disabled] {
        background-color: #efefef;
        cursor: not-allowed;
      }

      .container .foreign-only {
        display: none;
      }
      .container .local-only {
        display: none;
      }
      .container.foreign .foreign-only {
        display: block;
      }
      .container.local .foreign-only {
        display: none;
      }
      .container.foreign .local-only {
        display: none;
      }
      .container.local .local-only {
        display: block;
      }


    </style>

    <div class="navbar navbar-default navbar-nyt-default navbar-nyt-primary">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/search/">ðŸ”ŽðŸš¢ Stevedore</a>
        </div>
        <ul class="nav navbar-nav navbar-left">
          <li class="navbar-summary"><span>Create a search engine</span></li>
        </ul>
        <ul class="nav navbar-nav navbar-right navbar-bits">
          <li><a href="http://github.com/newsdev/stevedore">About</a></li>
          <li><a href="http://github.com/newsdev/stevedore/issues">Problems?</a></li>
          <li><a href="/quit">Quit</a></li>
        </ul>
      </div>
    </div>

    <div id="everything-container" class="container local">

      <h1>Let's make a search engine!</h1>
      <p>We've gotta take your documents, process them to extract the text, and then send that to the search engine.</p>

      <form id="new-index" method="post" action="/do"> <!-- TODO, submit and stuff -->
        <div class="input-field" id="index-title">
          <h4>Let's give this search engine you're making a name.</h4>
          <p>Keep it short but descriptive.</p>
          <input class="form-input" name="index-title" type="text" placeholder="Mayor Smith's Emails">
        </div>

        <div class="input-field" id="index-description">
          <h4>Tell me a bit more about <span id="index-title-copy">it</span>...</h4>
          <p>Just a short description. Keep it a little less short but <em>at least</em> as descriptive.</p>
          <textarea name="index-description" ></textarea>
        </div>


        <!-- If this search engine is "local", take a local path to files. If it's not, take an S3:// path, ask for ES URL, S3:// path for  -->

        <div class="input-field" id="local-or-foreign">
          <h4>Is this search engine just for you, or will other people use it too?</h4>
          <p>If the search engine is just for you, it will run just on your computer, as a demo. </p>
           <p>If other people will use it, you need to have an ElasticSearch server and an Amazon S3 account.</p>
          <input type="radio" name="local" value="local" checked id="local-radio-local"><label for="local-radio-local">Just for me (Demo mode)</label>
          <br>
          <input type="radio" name="local" value="foreign" id="local-radio-foreign"><label for="local-radio-foreign">To be shared</label>
        </div>


        <div class="input-field foreign-only" id="files-foreign">
          <h4>What files should we put into the search engine?</h4>
          <p>Give me a path on Amazon S3.</p>
          <input class="form-input" name="files" type="text" placeholder="s3://my-bucket-name/emails/">
        </div>

        <div class="input-field local-only" id="files-local">
          <h4>What files should we put into the search engine?</h4>
          <p>Give me an absolute path on your computer.</p>
           <p>Eventually, you might be able to drag a folder into this text box</p>
          <input class="form-input" name="files" type="text" placeholder="/Users/MyUsername/files/stuff/">
        </div>

        <div class="input-field" id="filetype">
          <h4>What kind of files are these?</h4>
          <p>Are these emails? Or just unstructured blobs of text?</p>
          <p>You can also write your own templates if you want. If you've written your own, select Other and type in a value. </p>
          <select name="filetype">
            <option value="blob">blobs of text</option> 
            <option value="email">emails</option>
            <option value="OTHER">Other</option>
          </select>
          <input class="form-input" name="other-filetype" type="text" placeholder="crime-report" style="display: none;">
        </div>


        <div class="input-field foreign-only"  id="es-host">
          <h4>What's the URL of your ElasticSearch server?</h4>
          <p>It needs to be able to accept POST requests -- to actually index your documents, at this URL. (Port 9200 is the default.)</p>
          <input class="form-input" name="es-host" type="text" placeholder="http://localhost:9200">
        </div>

        <div class="input-field foreign-only" id="frontend-location">
          <h4>Where should we put the search engine?</h4>
          <p>Give me a path on Amazon S3. <span id="already-on-s3"> If your documents are already on S3, you may want to just set this to the same path.<span></p>
          <p>The keys to write to this S3 bucket should already be in your environment, visit <a href="http://docs.aws.amazon.com/AWSSdkDocsRuby/latest//DeveloperGuide/prog-basics-creds.html">this Amazon help page</a> for more info.</p>
          <p></p>
          <input class="form-input" name="frontend-location" type="text" placeholder="s3://my-bucket-name/emails/frontend">
        </div>


        <div class="input-field" id="index-name">
          <h4>ElasticSearch index name</h4>
          <p>Set automatically. <a href="javascript:void()" onclick="$('#index-name input').removeAttr('disabled'); $(e.currentTarget).remove()">I want to set this myself</a> (No spaces or funny characters or you'll have a bad time!)</p>
          <input class="form-input" disabled name="index-name" type="text" placeholder="Mayor Smith's Emails">
        </div>


        <input type="submit" id="submit" value="Submit" class="btn"></input>
        <p>Once you press submit, Stevedore will start processing your documents. This can take a few minutes, especially if you have a lot of documents. Follow the logs below for information on progress. Once your documents are done processing, you'll be taken directly to your new search engine.</p>
      </form>

      <h4>Logs: What's goin' on?</h4>
      <div id="logs">

      </div>

    </div>


  </body>
</html>
